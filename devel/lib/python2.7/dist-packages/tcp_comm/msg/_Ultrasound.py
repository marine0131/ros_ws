# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tcp_comm/Ultrasound.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Ultrasound(genpy.Message):
  _md5sum = "6a2ee6ada60a58fe4ab82604f9f4f532"
  _type = "tcp_comm/Ultrasound"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 ultra_1
uint8 ultra_2
uint8 ultra_3
uint8 ultra_4
uint8 ultra_5
uint8 ultra_6
"""
  __slots__ = ['ultra_1','ultra_2','ultra_3','ultra_4','ultra_5','ultra_6']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ultra_1,ultra_2,ultra_3,ultra_4,ultra_5,ultra_6

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Ultrasound, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ultra_1 is None:
        self.ultra_1 = 0
      if self.ultra_2 is None:
        self.ultra_2 = 0
      if self.ultra_3 is None:
        self.ultra_3 = 0
      if self.ultra_4 is None:
        self.ultra_4 = 0
      if self.ultra_5 is None:
        self.ultra_5 = 0
      if self.ultra_6 is None:
        self.ultra_6 = 0
    else:
      self.ultra_1 = 0
      self.ultra_2 = 0
      self.ultra_3 = 0
      self.ultra_4 = 0
      self.ultra_5 = 0
      self.ultra_6 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_6B.pack(_x.ultra_1, _x.ultra_2, _x.ultra_3, _x.ultra_4, _x.ultra_5, _x.ultra_6))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.ultra_1, _x.ultra_2, _x.ultra_3, _x.ultra_4, _x.ultra_5, _x.ultra_6,) = _struct_6B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_6B.pack(_x.ultra_1, _x.ultra_2, _x.ultra_3, _x.ultra_4, _x.ultra_5, _x.ultra_6))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.ultra_1, _x.ultra_2, _x.ultra_3, _x.ultra_4, _x.ultra_5, _x.ultra_6,) = _struct_6B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6B = struct.Struct("<6B")
