# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from api_msgs/GridLaserRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GridLaserRequest(genpy.Message):
  _md5sum = "9b13f31f7a0a36901919f7ec0d9f40d4"
  _type = "api_msgs/GridLaserRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string request
"""
  __slots__ = ['request']
  _slot_types = ['string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       request

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GridLaserRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.request is None:
        self.request = ''
    else:
      self.request = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.request
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request = str[start:end].decode('utf-8')
      else:
        self.request = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.request
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request = str[start:end].decode('utf-8')
      else:
        self.request = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from api_msgs/GridLaserResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import api_msgs.msg

class GridLaserResponse(genpy.Message):
  _md5sum = "fae0bf771ee3824e3c4d670821bd5e83"
  _type = "api_msgs/GridLaserResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """GridPoint[] laserPoint
int32 mapGridWidth
int32 mapGridHeight
float32 mapResolution
string msg


================================================================================
MSG: api_msgs/GridPoint
int32 x
int32 y
"""
  __slots__ = ['laserPoint','mapGridWidth','mapGridHeight','mapResolution','msg']
  _slot_types = ['api_msgs/GridPoint[]','int32','int32','float32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       laserPoint,mapGridWidth,mapGridHeight,mapResolution,msg

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GridLaserResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.laserPoint is None:
        self.laserPoint = []
      if self.mapGridWidth is None:
        self.mapGridWidth = 0
      if self.mapGridHeight is None:
        self.mapGridHeight = 0
      if self.mapResolution is None:
        self.mapResolution = 0.
      if self.msg is None:
        self.msg = ''
    else:
      self.laserPoint = []
      self.mapGridWidth = 0
      self.mapGridHeight = 0
      self.mapResolution = 0.
      self.msg = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.laserPoint)
      buff.write(_struct_I.pack(length))
      for val1 in self.laserPoint:
        _x = val1
        buff.write(_struct_2i.pack(_x.x, _x.y))
      _x = self
      buff.write(_struct_2if.pack(_x.mapGridWidth, _x.mapGridHeight, _x.mapResolution))
      _x = self.msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.laserPoint is None:
        self.laserPoint = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.laserPoint = []
      for i in range(0, length):
        val1 = api_msgs.msg.GridPoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _struct_2i.unpack(str[start:end])
        self.laserPoint.append(val1)
      _x = self
      start = end
      end += 12
      (_x.mapGridWidth, _x.mapGridHeight, _x.mapResolution,) = _struct_2if.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.msg = str[start:end].decode('utf-8')
      else:
        self.msg = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.laserPoint)
      buff.write(_struct_I.pack(length))
      for val1 in self.laserPoint:
        _x = val1
        buff.write(_struct_2i.pack(_x.x, _x.y))
      _x = self
      buff.write(_struct_2if.pack(_x.mapGridWidth, _x.mapGridHeight, _x.mapResolution))
      _x = self.msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.laserPoint is None:
        self.laserPoint = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.laserPoint = []
      for i in range(0, length):
        val1 = api_msgs.msg.GridPoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _struct_2i.unpack(str[start:end])
        self.laserPoint.append(val1)
      _x = self
      start = end
      end += 12
      (_x.mapGridWidth, _x.mapGridHeight, _x.mapResolution,) = _struct_2if.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.msg = str[start:end].decode('utf-8')
      else:
        self.msg = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2if = struct.Struct("<2if")
_struct_2i = struct.Struct("<2i")
class GridLaser(object):
  _type          = 'api_msgs/GridLaser'
  _md5sum = '70385a002e518c7e14ab0566622593e3'
  _request_class  = GridLaserRequest
  _response_class = GridLaserResponse
