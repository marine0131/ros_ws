# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from my_tutorial/GridLaser.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import my_tutorial.msg

class GridLaser(genpy.Message):
  _md5sum = "0e45ff288b41dffb248ecb1dbf9881bc"
  _type = "my_tutorial/GridLaser"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """GridPoint[] gridPnt
int32 mapGridWidth
int32 mapGridHeight

================================================================================
MSG: my_tutorial/GridPoint
int32 x
int32 y
"""
  __slots__ = ['gridPnt','mapGridWidth','mapGridHeight']
  _slot_types = ['my_tutorial/GridPoint[]','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       gridPnt,mapGridWidth,mapGridHeight

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GridLaser, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.gridPnt is None:
        self.gridPnt = []
      if self.mapGridWidth is None:
        self.mapGridWidth = 0
      if self.mapGridHeight is None:
        self.mapGridHeight = 0
    else:
      self.gridPnt = []
      self.mapGridWidth = 0
      self.mapGridHeight = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.gridPnt)
      buff.write(_struct_I.pack(length))
      for val1 in self.gridPnt:
        _x = val1
        buff.write(_struct_2i.pack(_x.x, _x.y))
      _x = self
      buff.write(_struct_2i.pack(_x.mapGridWidth, _x.mapGridHeight))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.gridPnt is None:
        self.gridPnt = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.gridPnt = []
      for i in range(0, length):
        val1 = my_tutorial.msg.GridPoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _struct_2i.unpack(str[start:end])
        self.gridPnt.append(val1)
      _x = self
      start = end
      end += 8
      (_x.mapGridWidth, _x.mapGridHeight,) = _struct_2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.gridPnt)
      buff.write(_struct_I.pack(length))
      for val1 in self.gridPnt:
        _x = val1
        buff.write(_struct_2i.pack(_x.x, _x.y))
      _x = self
      buff.write(_struct_2i.pack(_x.mapGridWidth, _x.mapGridHeight))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.gridPnt is None:
        self.gridPnt = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.gridPnt = []
      for i in range(0, length):
        val1 = my_tutorial.msg.GridPoint()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _struct_2i.unpack(str[start:end])
        self.gridPnt.append(val1)
      _x = self
      start = end
      end += 8
      (_x.mapGridWidth, _x.mapGridHeight,) = _struct_2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2i = struct.Struct("<2i")
